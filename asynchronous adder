Source Code
module asyn (clk, rst, count);
input clk;
input rst;
output [3:0] count;
reg [3:0] count;
always @(negedge clk)
if(rst)
count [0]=1'b0; else
count [0]=~count[0]; always @(negedge count[0])
if (rst)
count [1]=1'b0;
else
count [1]=~count[1];
always @(negedge count[1])
if(rst)
count [2]=1'b0;
else
count [2]=~count [2];
always @(negedge count[2])
if(rst)
count [3]=1'b0;
else
count [3]=count[3];
endmodule


Testbench Code
module asyn1_v;
reg clk; reg rst;
wire [3:0] count;
asyn uut (.clk(clk),.rst(rst), .count(count));
initial begin
clk=0; rst=0;
forever #5 clk=~clk;
end
initial begin
rst=1;
#10 rst=0;
#100 rst=1;
#10 rst=0;
#200 $finish;
end
endmodule
